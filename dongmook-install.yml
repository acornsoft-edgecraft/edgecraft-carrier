---
- hosts: masters[0]
  remote_user: "{{ remote_user }}"
  vars:
    dongmook: "/Users/dongmook/git-workspaces/edgecarrier/roles/carrier/install/templates/"
    installed:  
      koreboard: false
      kong: false
      gitlab: false
      argocd: false
      nexus: false
      jaeger: true
      grafana: false
      kiali: false
      istio: false
      istio_demo: true
      prometheus: false
      kubesphere: false
      consul: false
    
    chart_version:
      zabbix: "0.3.2"
      koreboard: "0.4.0"
      nexus: "29.0.2"
      kong: "2.1.0"
      konga: "1.0.0"
      argocd: "3.26.8"
      prometheus: "14.1.1"
      kiali-operator: "1.30.0"
      jaeger-operator: "2.21.3"
      grafana: "6.11.0"
      ks-installer: "0.2.2"
      jupyterhub: "0.11.1"
      consul: "0.37.0"
      gitlab: "5.4.2"


  tasks:
  ### jaeger install
  - name: Template add in Master[0]
    template:
      src: "{{dongmook}}{{ jaeger }}.yaml.j2"
      dest: "{{ ansible_env.HOME }}/carrier/{{ jaeger }}.yaml"
      mode: 0644

  - name: Install jaeger from Helm Charts
    when: "{{ installed.jaeger  }}"
    kubernetes.core.helm:
      name: "{{ jaeger }}"
      kubeconfig: "{{ kubeconfig }}"
      atomic: true    # 설치 실패시 삭제 처리
      chart_ref: "{{ helm_repository_name }}/jaeger-operator"
      chart_version: "{{ chart_version['jaeger-operator'] }}"
      release_namespace: "{{ monitoring_namespace }}"
      create_namespace: true
      values_files:
        - "{{ helm_value_dir }}/{{ jaeger }}.yaml"

  ######

  ### kiali install
  # - name: Template add in Master[0]
  #   template:
  #     src: "{{dongmook}}{{ kiali }}.yaml.j2"
  #     dest: "{{ ansible_env.HOME }}/carrier/{{ kiali }}.yaml"
  #     mode: 0644

  # - name: Install kiali from Helm Charts
  #   when: "{{ installed.kiali }}"
  #   kubernetes.core.helm:
  #     name: "{{ kiali }}"
  #     kubeconfig: "{{ kubeconfig }}"
  #     atomic: true    # 설치 실패시 삭제 처리
  #     chart_ref: "{{ helm_repository_name }}/kiali-operator"
  #     chart_version: "{{ chart_version['kiali-operator'] }}"
  #     release_namespace: "{{ monitoring_namespace }}"
  #     create_namespace: true
  #     values_files:
  #       - "{{ helm_value_dir }}/{{ kiali }}.yaml"
  ######

  ### consul install
  # - name: Template add in Master[0]
  #   template:
  #     src: "{{dongmook}}{{ consul }}.yaml.j2"
  #     dest: "{{ ansible_env.HOME }}/carrier/{{ consul }}.yaml"
  #     mode: 0644

  # - name: Install consul from Helm Charts
  #   when: "{{ installed.consul }}"
  #   kubernetes.core.helm:
  #     name: "{{ consul }}"
  #     kubeconfig: "{{ kubeconfig }}"
  #     atomic: true    # 설치 실패시 삭제 처리
  #     chart_ref: "{{ helm_repository_name }}/consul"
  #     chart_version: "{{ chart_version['consul'] }}"
  #     release_namespace: "{{ consul }}"
  #     create_namespace: true
  #     values_files:
  #       - "{{ helm_value_dir }}/{{ consul }}.yaml"
  ######

  ### istio demo
  ## ingection 처리는 파드에서 직접 사용
  # - name: Template add in Master[0]
  #   template:
  #     src: "{{dongmook}}istio_demo_2_0.yaml.j2"
  #     dest: "{{ ansible_env.HOME }}/carrier/istio_demo/istio_demo_2_0.yaml"
  #     mode: 0644

  ## 샘플 앱 서비스가 default namespace를 사용 하도록 되어 있다.
  ## namespace 생성은 사용 안함.
  ## - name: Istio demo - create namespace
  ##   when: "{{ installed.istio_demo }}"
  ##   kubernetes.core.k8s:
  ##     kubeconfig: "{{ kubeconfig }}"
  ##     state: present
  ##     wait: true
  ##     definition:
  ##       apiVersion: v1
  ##       kind: Namespace
  ##       metadata:
  ##         name: istio-demo
  ##         labels:
  ##           istio-injection: enabled

  ## istio proxy 수동 사이드카 주입
  # - name: Istio demo deployment
  #   when: "{{ installed.istio_demo }}"
  #   command: >-
  #     istioctl kube-inject -f /root/carrier/istio_demo/istio_demo_2_0.yaml | kubectl apply -f -
  ######

  ### istio install
  ## istioctl 패키지 필요
  # - name: Template add in Master[0]
  #   template:
  #     # src: "{{ istio }}.yaml.j2"
  #     src: "{{dongmook}}/{{ istio }}.yaml.j2"
  #     dest: "{{ ansible_env.HOME }}/carrier/{{ istio }}.yaml"
  #     mode: 0644

  # - name: Install Istio
  #   when: "{{ installed.istio }}"
  #   command: >-
  #     istioctl install 
  #     --kubeconfig='{{kubeconfig}}' 
  #     --skip-confirmation 
  #     -f {{ ansible_env.HOME }}/carrier/{{ istio }}.yaml
  ###### 

  ### kubesphere install
  # - name: Template add in Master[0]
  #   template:
  #     src: "{{ item.src }}"
  #     dest: "{{ ansible_env.HOME }}/carrier/{{ item.dest }}"
  #     mode: 0644
  #   with_items:
  #     - { src: "{{dongmook}}{{ kubesphere }}.yaml.j2", dest: "{{ kubesphere }}.yaml" }
  #     - { src: "{{dongmook}}{{ kubesphere }}.sh.j2", dest: "{{ kubesphere }}.sh" }
  #     - { src: "{{dongmook}}{{ kubesphere }}_provisionercapabilities.yaml.j2", dest: "{{ kubesphere }}_provisionercapabilities.yaml" }
  #     # - { src: "{{ kubesphere }}_provisionercapabilities.yaml.j2", dest: "{{ kubesphere }}_provisionercapabilities.yaml" }
  #     # - { src: "{{ kubesphere }}.yaml.j2", dest: "{{ kubesphere }}.yaml" }
  #     # - { src: "{{ kubesphere }}.sh.j2", dest: "{{ kubesphere }}.sh" }

  # - name: kubesphere k8s install provisionercapabilities crd in cluster
  #   when: "{{ installed.kubesphere }}"
  #   kubernetes.core.k8s:
  #     # name: "{{ kubesphere }}"
  #     kubeconfig: "{{ kubeconfig }}"
  #     namespace: "{{ kubesphere_namespace }}"
  #     state: present
  #     src: "{{ ansible_env.HOME }}/carrier/{{ kubesphere }}_provisionercapabilities.yaml"
  #     wait: true

  # - name: Install kubesphere from Helm Charts
  #   when: "{{ installed.kubesphere }}"
  #   kubernetes.core.helm:
  #     name: "{{ kubesphere }}"
  #     kubeconfig: "{{ kubeconfig }}"
  #     atomic: true    # 설치 실패시 삭제 처리
  #     chart_ref: "{{ helm_repository_name }}/ks-installer"
  #     chart_version: "{{ chart_version['ks-installer'] }}"
  #     release_namespace: "{{ kubesphere_namespace }}"
  #     create_namespace: true
  #     values_files:
  #       - "{{ helm_value_dir }}/{{ kubesphere }}.yaml"
  ######
  
  ### test namespace create
  ## dug 사용
  # - name: test
  #   kubernetes.core.k8s:
  #     kubeconfig: "{{ kubeconfig }}"
  #     name: "test"
  #     kind: "namespace"
  #     state: present
  #     wait: true
  #   register: debug

  # - debug:
  #     var: debug
  

  # - name: test
  #   kubernetes.core.k8s:
  #     kubeconfig: "{{ kubeconfig }}"
  #     namespace: "gitlab"
  #     state: present
  #     src: "{{ ansible_env.HOME }}/carrier/gitlab.yaml"
  #     wait: true

  # - name: Install GitLab in Cluster
  #   kubernetes.core.k8s:
  #     name: "asdf"
  #     kubeconfig: "{{ kubeconfig }}"
  #     namespace: "gitlab"
  #     state: present
  #     src: “{{ ansible_env.HOME }}/carrier/gitlab.yaml”
  #     wait: true
  ######