apiVersion: v1
data:
  cacert: ${OPENSTACK_CLOUD_CACERT_B64}
  clouds.yaml: ${OPENSTACK_CLOUD_YAML_B64}
kind: Secret
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move: "true"
  name: ${CLUSTER_NAME}-cloud-config
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-worker-node
spec:
  template:
    spec:
      files: 
        - content: ${OPENSTACK_CLOUD_CACERT_B64}
          encoding: base64
          owner: root
          path: /etc/certs/cacert
          permissions: "0600"
        - path: /etc/containerd/config.toml
          content: |
            version = 2
            imports = ["/etc/containerd/conf.d/*.toml"]
            [plugins]
              [plugins."io.containerd.grpc.v1.cri"]
                sandbox_image = "registry.k8s.io/pause:3.9"
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                runtime_type = "io.containerd.runc.v2"
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                SystemdCgroup = true
                [plugins."io.containerd.grpc.v1.cri".registry]
                  config_path = "/etc/containerd/certs.d"
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: external
            provider-id: openstack:///'{{ instance_id }}'
          name: '{{ local_hostname }}'
      preKubeadmCommands:
        - mkdir -p /etc/docker/certs.d/${PRIVATE_REGISTRY_IP}
        - curl -Lk https://${PRIVATE_REGISTRY_IP}/api/v2.0/systeminfo/getcert -o /etc/docker/certs.d/${PRIVATE_REGISTRY_IP}/ca.crt
        - rm -rf /etc/containerd/certs.d
        - mkdir -p /etc/containerd/certs.d/${PRIVATE_REGISTRY_IP}
        - echo ${CONTAINERD_PRIVATE_REGISTY_HOSTS} | base64 -d > /etc/containerd/certs.d/${PRIVATE_REGISTRY_IP}/hosts.toml
        - mkdir -p /etc/containerd/certs.d/docker.io
        - echo ${CONTAINERD_DOCKER_IO_HOSTS} | base64 -d > /etc/containerd/certs.d/docker.io/hosts.toml
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: ${CLUSTER_NAME}
  labels:
    csiNfsChart: enabled
    dashboardChart: enabled
    veleroChart: enabled
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
        - ${POD_CIDR}
    services:
      cidrBlocks:
        - ${SVC_CIDR}
    serviceDomain: cluster.local
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
    kind: OpenStackCluster
    name: ${CLUSTER_NAME}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-worker-node
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels: null
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: ${CLUSTER_NAME}-worker-node
      clusterName: ${CLUSTER_NAME}
      failureDomain: ${OPENSTACK_FAILURE_DOMAIN}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
        kind: OpenStackMachineTemplate
        name: ${CLUSTER_NAME}-worker-node
      version: ${KUBERNETES_VERSION}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: external
      controllerManager:
        extraArgs:
          cloud-provider: external
    files: 
      - content: ${CLOUD_CONTROLLER_MANAGER_ROLES}
        encoding: base64
        owner: root
        path: /etc/kubernetes/addon/openstack/cloud-controller-manager-roles.yaml
        permissions: "0600"
      - content: ${CLOUD_CONTROLLER_MANAGER_ROLE_BINDINGS}
        encoding: base64
        owner: root
        path: /etc/kubernetes/addon/openstack/cloud-controller-manager-role-bindings.yaml
        permissions: "0600"
      - content: ${OPENSTACK_CLOUD_CONTROLLER_MANAGER_DS}
        encoding: base64
        owner: root
        path: /etc/kubernetes/addon/openstack/openstack-cloud-controller-manager-ds.yaml
        permissions: "0600"
      - content: ${OPENSTACK_CLOUD_PROVIDER_CONF_B64}
        encoding: base64
        owner: root
        path: /etc/kubernetes/cloud.conf
        permissions: "0600"
      - path: /etc/containerd/config.toml
        content: |
          version = 2
          imports = ["/etc/containerd/conf.d/*.toml"]
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              sandbox_image = "registry.k8s.io/pause:3.9"
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
              runtime_type = "io.containerd.runc.v2"
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
              SystemdCgroup = true
              [plugins."io.containerd.grpc.v1.cri".registry]
                config_path = "/etc/containerd/certs.d"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          provider-id: openstack:///'{{ instance_id }}'
        name: "{{ local_hostname }}"
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          provider-id: openstack:///'{{ instance_id }}'
        name: "{{ local_hostname }}"
    preKubeadmCommands:
      - mkdir -p /etc/docker/certs.d/${PRIVATE_REGISTRY_IP}
      - curl -Lk https://${PRIVATE_REGISTRY_IP}/api/v2.0/systeminfo/getcert -o /etc/docker/certs.d/${PRIVATE_REGISTRY_IP}/ca.crt
      - rm -rf /etc/containerd/certs.d
      - mkdir -p /etc/containerd/certs.d/${PRIVATE_REGISTRY_IP}
      - echo ${CONTAINERD_PRIVATE_REGISTY_HOSTS} | base64 -d > /etc/containerd/certs.d/${PRIVATE_REGISTRY_IP}/hosts.toml
      - mkdir -p /etc/containerd/certs.d/docker.io
      - echo ${CONTAINERD_DOCKER_IO_HOSTS} | base64 -d > /etc/containerd/certs.d/docker.io/hosts.toml
    postKubeadmCommands:
      - kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico.yaml
      - kubectl --kubeconfig=/etc/kubernetes/admin.conf create secret -n kube-system generic cloud-config --from-file=/etc/kubernetes/cloud.conf
      - kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f /etc/kubernetes/addon/openstack/cloud-controller-manager-roles.yaml
      - kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f /etc/kubernetes/addon/openstack/cloud-controller-manager-role-bindings.yaml
      - kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f /etc/kubernetes/addon/openstack/openstack-cloud-controller-manager-ds.yaml
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
      kind: OpenStackMachineTemplate
      name: ${CLUSTER_NAME}-control-plane
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
kind: OpenStackCluster
metadata:
  name: ${CLUSTER_NAME}
spec:
  apiServerLoadBalancer:
    enabled: false
  cloudName: ${OPENSTACK_CLOUD}
  dnsNameservers:
  - ${OPENSTACK_DNS_NAMESERVERS}
  externalNetworkId: ${OPENSTACK_EXTERNAL_NETWORK_ID}
  identityRef:
    kind: Secret
    name: ${CLUSTER_NAME}-cloud-config
  managedSecurityGroups: true
  nodeCidr: ${OPENSTACK_NETWORK_CIDR}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
kind: OpenStackMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
spec:
  template:
    spec:
      securityGroups:
        - name: edgecraft-nodeport
      cloudName: ${OPENSTACK_CLOUD}
      flavor: ${OPENSTACK_CONTROL_PLANE_MACHINE_FLAVOR}
      identityRef:
        kind: Secret
        name: ${CLUSTER_NAME}-cloud-config
      image: ${OPENSTACK_IMAGE_NAME}
      sshKeyName: ${OPENSTACK_SSH_KEY_NAME}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
kind: OpenStackMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-worker-node
spec:
  template:
    spec:
      cloudName: ${OPENSTACK_CLOUD}
      flavor: ${OPENSTACK_NODE_MACHINE_FLAVOR}
      identityRef:
        kind: Secret
        name: ${CLUSTER_NAME}-cloud-config
      image: ${OPENSTACK_IMAGE_NAME}
      sshKeyName: ${OPENSTACK_SSH_KEY_NAME}
